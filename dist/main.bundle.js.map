{"version":3,"sources":["/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/$_gendir lazy","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.component.css","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.component.html","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.component.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.module.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/environments/environment.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/main.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/polyfills.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/$$_gendir lazy\n// module id = ../../../../../src/$$_gendir lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/@angular/cli/node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<a href=\\\"#\\\" (click)=\\\"ArrayList()\\\">ArrayList string</a>&nbsp;\\n<a href=\\\"#\\\" (click)=\\\"LinkedList()\\\">LinkedList string</a>&nbsp;\\n<a href=\\\"#\\\" (click)=\\\"HashSet()\\\">HashSet string</a>&nbsp;\\n<a href=\\\"#\\\" (click)=\\\"TreeSet()\\\">TreeSet string</a>&nbsp;\\n<a href=\\\"#\\\" (click)=\\\"ArrayListAllFields()\\\">ArrayList PetStoreProduct compare all fields</a>&nbsp;\\n<a href=\\\"#\\\" (click)=\\\"LinkedListAllFields()\\\">LinkedList PetStoreProduct compare all fields</a>&nbsp;\\n<a href=\\\"#\\\" (click)=\\\"HashSetAllFields()\\\">HashSet PetStoreProduct compare all fields</a>&nbsp;\\n<br>\\n\\n<p *ngIf=\\\"active=='ArrayList'\\\">\\n  ArrayList compare on a string:<br>\\n  <li *ngFor=\\\"let str of alData\\\"><button (click)=\\\"removeArrayListEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #aladd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addArrayList(aladd.value);aladd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  An ArrayList is a List backed by a resizeable array.   Items added to an ArrayList will be added at the end of the ArrayList.<br>\\n  Click on an item to remove it from the ArrayList or enter a value and click Add to add it to the ArrayList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_arraylist_.arraylist.html\\\">ArrayList Documentation</a><br><br>\\n\\n  alData:ArrayList&lt;string> = new ArrayList&lt;string>(new AllFieldCollectable&lt;string>());<br>\\n  this.alData.add (\\\"Cat\\\");<br>\\n  this.alData.add (\\\"Squirrel\\\");<br>\\n  this.alData.add (\\\"Dog\\\");<br>\\n  this.alData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.alData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an Arraylist in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of alData\\\">&lt;button (click)=\\\"removeArrayListEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n\\n</p>\\n\\n<p *ngIf=\\\"active=='LinkedList'\\\">\\n  LinkedList compare on a string:<br>\\n  <li *ngFor=\\\"let str of llData\\\"><button (click)=\\\"removeLinkedListEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #lladd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addLinkedList(lladd.value);lladd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A LinkedList is a List backed by a Doubly-linked list.   Items added to a LinkedList will be added at the end of the LinkedList.<br>\\n  Click on an item to remove it from the LinkedList or enter a value and click Add to add it to the LinkedList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_linkedlist_.linkedlist.html\\\">LinkedList Documentation</a><br><br>\\n\\n  llData:LinkedList&lt;string> = new LinkedList&lt;string>(new AllFieldCollectable&lt;string>());<br>\\n  this.llData.add (\\\"Cat\\\");<br>\\n  this.llData.add (\\\"Squirrel\\\");<br>\\n  this.llData.add (\\\"Dog\\\");<br>\\n  this.llData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.llData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a LinkedList in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of llData\\\">&lt;button (click)=\\\"removeLinkedListEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n</p>\\n\\n<p *ngIf=\\\"active=='HashSet'\\\">\\n  HashSet compare on a string:<br>\\n  <li *ngFor=\\\"let str of hsData\\\"><button (click)=\\\"removeHashSetEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #hsadd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addHashSet(hsadd.value);hsadd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A HashSet is a Set backed by a HashMap.   Duplicates are not permitted.   There are no guarantees as to the iteration order of the set.   Set order is not guaranteed to remain constant over time.<br>\\n  Click on an item to remove it from the HashSet or enter a value and click Add to add it to the HashSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_hashset_.hashset.html\\\">HashSet Documentation</a><br><br>\\n\\n  hsData:HashSet&lt;string> = new HashSet&lt;string>(new AllFieldHashable&lt;string>());<br>\\n  this.hsData.add (\\\"Cat\\\");<br>\\n  this.hsData.add (\\\"Squirrel\\\");<br>\\n  this.hsData.add (\\\"Dog\\\");<br>\\n  this.hsData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.hsData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a HashSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of hsData\\\">&lt;button (click)=\\\"removeHashSetEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n</p>\\n\\n<p *ngIf=\\\"active=='TreeSet'\\\">\\n  TreeSet compare using string Comparator<br>\\n  <li *ngFor=\\\"let str of tsData\\\"><button (click)=\\\"removeTreeSetEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #tsadd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addTreeSet(tsadd.value);tsadd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A TreeSet is a Set backed by a TreeMap.   Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the TreeSet or enter a value and click Add to add it to the TreeSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_treeset_.treeset.html\\\">TreeSet Documentation</a><br><br>\\n\\n  tsData:TreeSet&lt;string> = new TreeSet&lt;string>(Collections.getStringComparator());<br>\\n  this.tsData.add (\\\"Cat\\\");<br>\\n  this.tsData.add (\\\"Squirrel\\\");<br>\\n  this.tsData.add (\\\"Dog\\\");<br>\\n  this.tsData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.tsData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a TreeSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of tsData\\\">&lt;button (click)=\\\"removeTreeSetEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n\\n</p>\\n\\n\\n<p *ngIf=\\\"active=='ArrayListAllFields'\\\">\\n  ArrayList compare on all fields:<br>\\n  <li *ngFor=\\\"let psp of alAllData\\\"><button (click)=\\\"removeArrayListAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #alalladdsku type=text placeholder=\\\"sku\\\">\\n  <input #alalladdname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addArrayListAll(alalladdsku.value, alalladdname.value);alalladdsku.value='';alalladdname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  An ArrayList is a List backed by a resizeable array.   Items added to an ArrayList will be added at the end of the ArrayList.<br>\\n  Click on an item to remove it from the ArrayList or enter a sku and a name and click Add to add it to the ArrayList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_arraylist_.arraylist.html\\\">ArrayList Documentation</a><br><br>\\n\\n  alAllData:ArrayList&lt;PetStoreProduct> = new ArrayList&lt;PetStoreProduct>(new AllFieldCollectable&lt;PetStoreProduct>());<br>\\n  this.alAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.alAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.alAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.alAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.alAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n    &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an Arraylist in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of alAllData\\\">&lt;button (click)=\\\"removeArrayListAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n<br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n<br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\\n\\n<p *ngIf=\\\"active=='LinkedListAllFields'\\\">\\n    LinkedList compare on all fields:<br>\\n    <li *ngFor=\\\"let psp of llAllData\\\"><button (click)=\\\"removeLinkedListAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n    <br>\\n    <input #llalladdsku type=text placeholder=\\\"sku\\\">\\n    <input #llalladdname type=text placeholder=\\\"name\\\">\\n    <button (click)=\\\"addLinkedListAll(llalladdsku.value, llalladdname.value);llalladdsku.value='';llalladdname.value=''\\\">Add</button>\\n\\n    <br>  <br>  <br>  <br>\\n    A LinkedList is a List backed by a Doubly-linked list.   Items added to a LinkedList will be added at the end of the LinkedList.<br>\\n    Click on an item to remove it from the LinkedList or enter a sku and a name and click Add to add it to the LinkedList.<br><br>\\n    <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_linkedlist_.linkedlist.html\\\">LinkedList Documentation</a><br><br>\\n\\n    llAllData:LinkedList&lt;PetStoreProduct> = new LinkedList&lt;PetStoreProduct>(new AllFieldCollectable&lt;PetStoreProduct>());<br>\\n    this.llAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n    this.llAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n    this.llAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n    this.llAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n    for (let iter:JIterator&lt;PetStoreProduct> = this.llAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n    &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n    &#125;<br>\\n    <br>\\n    How to iterate over an LinkedList in the HTML template for an Angular Component:<br>\\n    &lt;li *ngFor=\\\"let pspa of llAllData\\\">&lt;button (click)=\\\"removeLinkedListAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n    <br>  <br>\\n    export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n      &nbsp;&nbsp;private sku:string;<br>\\n      &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n      &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n    <br>\\n      &nbsp;&nbsp;private name:string;<br>\\n      &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n      &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n    <br>\\n      &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n      &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n      &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n      &nbsp;&nbsp;}<br>\\n    }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='HashSetAllFields'\\\">\\n  HashSet compare on all fields:<br>\\n  <li *ngFor=\\\"let psp of hsAllData\\\"><button (click)=\\\"removeHashSetAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #hsalladdsku type=text placeholder=\\\"sku\\\">\\n  <input #hsalladdname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addHashSetAll(hsalladdsku.value, hsalladdname.value);hsalladdsku.value='';hsalladdname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A HashSet is a Set backed by a HashMap.   Duplicates are not permitted.   There are no guarantees as to the iteration order of the set.   Set order is not guaranteed to remain constant over time.<br>\\n  Click on an item to remove it from the HashSet or enter a sku and a name and and click Add to add it to the HashSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_src_hashset_.hashset.html\\\">HashSet Documentation</a><br><br>\\n\\n  hsAllData:HashSet&lt;PetStoreProduct> = new HashSet&lt;PetStoreProduct>(new AllFieldHashable&lt;PetStoreProduct>());<br>\\n  this.hsAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.hsAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.hsAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.hsAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.hsAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an HashSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of hsAllData\\\">&lt;button (click)=\\\"removeHashSetAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n  <br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n  <br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { ArrayList, LinkedList, HashSet, TreeSet, Hashable, AllFieldCollectable, AllFieldHashable, Collections, ImmutableCollection, JIterator } from 'typescriptcollectionsframework';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  active:string = \"ArrayList\";\n\n  alData:ArrayList<string> = new ArrayList<string>(new AllFieldCollectable<string>());\n  llData:LinkedList<string> = new LinkedList<string>(new AllFieldCollectable<string>());\n  hsData:HashSet<string> = new HashSet<string>(new AllFieldHashable<string>());\n  tsData:TreeSet<string> = new TreeSet<string>(Collections.getStringComparator());\n\n  alAllData:ArrayList<PetStoreProduct> = new ArrayList<PetStoreProduct>(new AllFieldCollectable<PetStoreProduct>());\n  llAllData:LinkedList<PetStoreProduct> = new LinkedList<PetStoreProduct>(new AllFieldCollectable<PetStoreProduct>());\n  hsAllData:HashSet<PetStoreProduct> = new HashSet<PetStoreProduct>(new AllFieldHashable<PetStoreProduct>());\n\n  constructor () {\n    this.alData.add (\"Cat\");\n    this.alData.add (\"Squirrel\");\n    this.alData.add (\"Dog\");\n\n    this.llData.add (\"Cat\");\n    this.llData.add (\"Squirrel\");\n    this.llData.add (\"Dog\");\n\n    this.hsData.add (\"Cat\");\n    this.hsData.add (\"Squirrel\");\n    this.hsData.add (\"Dog\");\n\n    this.tsData.add (\"Cat\");\n    this.tsData.add (\"Squirrel\");\n    this.tsData.add (\"Dog\");\n\n    let psp1:PetStoreProduct = new PetStoreProduct(\"ABCDE\", \"Bird Seed\");\n    let psp2:PetStoreProduct = new PetStoreProduct(\"FGHIJ\", \"Cat Food\");\n    let psp3:PetStoreProduct = new PetStoreProduct(\"KLMNO\", \"Dog Food\");\n\n    this.alAllData.add (psp1);\n    this.alAllData.add (psp2);\n    this.alAllData.add (psp3);\n\n    this.llAllData.add (psp1);\n    this.llAllData.add (psp2);\n    this.llAllData.add (psp3);\n\n    this.hsAllData.add (psp1);\n    this.hsAllData.add (psp2);\n    this.hsAllData.add (psp3);\n  }\n\n  ngOnInit() {\n  }\n\n  ArrayList() {\n    this.active = \"ArrayList\";\n  }\n  LinkedList() {\n    this.active = \"LinkedList\";\n  }\n  HashSet() {\n    this.active = \"HashSet\";\n  }\n  TreeSet() {\n    this.active = \"TreeSet\";\n  }\n  ArrayListAllFields() {\n    this.active = \"ArrayListAllFields\";\n  }\n  LinkedListAllFields() {\n    this.active = \"LinkedListAllFields\";\n  }\n  HashSetAllFields() {\n    this.active = \"HashSetAllFields\";\n  }\n\n  addArrayList(newdata:string) {\n    this.alData.add (newdata);\n  }\n  addLinkedList(newdata:string) {\n    this.llData.add (newdata);\n  }\n  addHashSet(newdata:string) {\n    this.hsData.add (newdata);\n  }\n  addTreeSet(newdata:string) {\n    this.tsData.add (newdata);\n  }\n  addArrayListAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.alAllData.add (psp);\n  }\n  addLinkedListAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.llAllData.add (psp);\n  }\n  addHashSetAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.hsAllData.add (psp);\n  }\n  removeArrayListEntry(olddata:string) {\n    this.alData.remove(olddata);\n  }\n  removeLinkedListEntry(olddata:string) {\n    this.llData.remove(olddata);\n  }\n  removeHashSetEntry(olddata:string) {\n    this.hsData.remove(olddata);\n  }\n  removeTreeSetEntry(olddata:string) {\n    this.tsData.remove(olddata);\n  }\n  removeArrayListAllEntry(oldpsp:PetStoreProduct) {\n    this.alAllData.remove(oldpsp);\n  }\n  removeLinkedListAllEntry(oldpsp:PetStoreProduct) {\n    this.llAllData.remove(oldpsp);\n  }\n  removeHashSetAllEntry(oldpsp:PetStoreProduct) {\n    this.hsAllData.remove(oldpsp);\n  }\n}\n\nexport class PetStoreProduct {\n  private sku:string;\n  public getSku():string { return this.sku; }\n  public setSku(newsku:string) { this.sku = newsku; }\n\n  private name:string;\n  public getName():string { return this.name; }\n  public setName(newname:string) { this.name = newname; }\n\n  constructor(isku:string, iname:string) {\n    this.sku = isku;\n    this.name = iname;\n  }\n}\n\nexport class PetStoreProductHashable implements Hashable<PetStoreProduct> {\n  equals (o1: PetStoreProduct, o2: PetStoreProduct) : boolean {\n    if (o1 === undefined) {\n      if (o2 === undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if (o1 === null) {\n      if (o2 === null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if ((o2 === null) || (o2 === undefined)) {\n      return false;\n    }\n\n    if (JSON.stringify(o1.getSku()) === JSON.stringify(o2.getSku()))\n      return true;\n    return false;\n  };\n  hashCode (o:PetStoreProduct) : number {\n    if (o === undefined) {\n      return 0;\n    }\n    if (o === null) {\n      return 0;\n    }\n    let tmp:string = JSON.stringify (o);\n    let hash: number = 0;\n    for (let loop = 0; loop < tmp.length; loop++) {\n      let n:number = tmp.charCodeAt (loop);\n      hash = ((hash * 256) + n) % 1000000000;\n    }\n    return hash;\n  };\n\n  getHashCodeForString (o:string) : number {\n    if (o === undefined) {\n      return 0;\n    }\n    if (o === null) {\n      return 0;\n    }\n    let tmp:string = JSON.stringify (o);\n    let hash: number = 0;\n    for (let loop = 0; loop < tmp.length; loop++) {\n      let n:number = tmp.charCodeAt (loop);\n      hash = ((hash * 256) + n) % 1000000000;\n    }\n    return hash;\n  }\n\n  getHashCodeForStringArray (o:string[]) : number {\n    if (o === undefined) {\n      return 0;\n    }\n    if (o === null) {\n      return 0;\n    }\n    let tmp:number = 0;\n    for (let loop = 0; loop < o.length; loop++) {\n      let ostr:string = o [loop];\n      tmp = ((tmp * 256) + this.getHashCodeForString (ostr)) % 1000000000;\n    }\n    return tmp;\n  }\n\n  getHashCodeForStrings (o:ImmutableCollection<string>) : number {\n    if (o === undefined) {\n      return 0;\n    }\n    if (o === null) {\n      return 0;\n    }\n    let tmp:number = 0;\n    for (let iter:JIterator<string> = o.iterator(); iter.hasNext(); ) {\n      let ostr:string = iter.next();\n      tmp = ((tmp * 256) + this.getHashCodeForString (ostr)) % 1000000000;\n    }\n    return tmp;\n  }\n\n  getHashCodeForNumber (o:number) : number {\n    if (o === undefined) {\n      return 0;\n    }\n    if (o === null) {\n      return 0;\n    }\n\n    let tmp:number = o;\n    while ((tmp < 1000000000) && (Math.floor (tmp) !== tmp)) {\n      tmp = tmp * 10;\n    }\n\n    return tmp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/environments/environment.ts","import './polyfills.ts';\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/main.ts","// This file includes polyfills needed by Angular and is loaded before\n// the app. You can add your own extra polyfills to this file.\nimport 'core-js/es6/symbol';\nimport 'core-js/es6/object';\nimport 'core-js/es6/function';\nimport 'core-js/es6/parse-int';\nimport 'core-js/es6/parse-float';\nimport 'core-js/es6/number';\nimport 'core-js/es6/math';\nimport 'core-js/es6/string';\nimport 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es6/regexp';\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'core-js/es6/reflect';\n\nimport 'core-js/es7/reflect';\nimport 'zone.js/dist/zone';\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular4/src/polyfills.ts"],"sourceRoot":"webpack:///"}